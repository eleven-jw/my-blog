generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" //
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  AUTHOR
  ADMIN
}

/* NextAuth 兼容模型（可选，保留便于集成） */
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/* 应用核心模型 */
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  posts         Post[]
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Post {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  excerpt     String?
  content     String   // 存 HTML / Markdown / Tiptap JSON（按你的实现定）
  status      String   @default("draft") // draft|published|scheduled
  publishedAt DateTime?
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  tags        Tag[]    // 隐式多对多：不要加 @relation references
  views       Int      @default(0)
  comments    Comment[] // <- 补上对应关系（一对多）
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[] // 隐式多对多另一端
}

model Comment {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  content   String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
}
